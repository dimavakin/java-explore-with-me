CREATE TABLE IF NOT EXISTS category (
        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR(50) NOT NULL UNIQUE
        );

CREATE TABLE IF NOT EXISTS location (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        lat DOUBLE NOT NULL,
        lon DOUBLE NOT NULL
        );

CREATE TABLE IF NOT EXISTS users (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR NOT NULL,
        email VARCHAR NOT NULL UNIQUE
        );

CREATE TABLE IF NOT EXISTS event (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        annotation TEXT NOT NULL,
        category_id INTEGER NOT NULL,
        description TEXT NOT NULL,
        event_date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
        location_id BIGINT NOT NULL,
        paid BOOLEAN,
        participant_limit INTEGER,
        request_moderation BOOLEAN,
        title VARCHAR(120) NOT NULL,
        state VARCHAR(120) NOT NULL,
        created_on TIMESTAMP WITHOUT TIME ZONE NOT NULL,
        published_on TIMESTAMP WITHOUT TIME ZONE NOT NULL,
        initiator_id BIGINT NOT NULL,
        confirmed_requests INTEGER DEFAULT 0,
        views INTEGER DEFAULT 0,
        CONSTRAINT fk_category FOREIGN KEY (category_id) REFERENCES category(id) ON DELETE RESTRICT,
        CONSTRAINT fk_location FOREIGN KEY (location_id) REFERENCES location(id) ON DELETE CASCADE,
        CONSTRAINT fk_user FOREIGN KEY (initiator_id) REFERENCES users(id) ON DELETE CASCADE
        );

CREATE TABLE IF NOT EXISTS compilations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pinned BOOLEAN NOT NULL DEFAULT false,
    title VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS compilation_events (
    compilation_id BIGINT NOT NULL,
    event_id BIGINT NOT NULL,
    PRIMARY KEY (compilation_id, event_id),
    CONSTRAINT fk_compilation FOREIGN KEY (compilation_id) REFERENCES compilations(id) ON DELETE CASCADE,
    CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES event(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS request (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_on TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    event_id BIGINT NOT NULL,
    requester_id BIGINT NOT NULL,
    status VARCHAR NOT NULL,
    CONSTRAINT fk_user FOREIGN KEY (requester_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES event(id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS event_views (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_id BIGINT NOT NULL,
    ip VARCHAR(39) NOT NULL,
    timestamp TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    text TEXT NOT NULL,
    event_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    parent_comment_id BIGINT,
    created_on TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    CONSTRAINT fk_comments FOREIGN KEY (parent_comment_id) REFERENCES comments(id) ON DELETE CASCADE,
    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES event(id) ON DELETE CASCADE
);

CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
declare
    dist float = 0;
    rad_lat1 float;
    rad_lat2 float;
    theta float;
    rad_theta float;
BEGIN
    IF lat1 = lat2 AND lon1 = lon2
    THEN
        RETURN dist;
    ELSE
        -- переводим градусы широты в радианы
        rad_lat1 = pi() * lat1 / 180;
        -- переводим градусы долготы в радианы
        rad_lat2 = pi() * lat2 / 180;
        -- находим разность долгот
        theta = lon1 - lon2;
        -- переводим градусы в радианы
        rad_theta = pi() * theta / 180;
        -- находим длину ортодромии
        dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

        IF dist > 1
            THEN dist = 1;
        END IF;

        dist = acos(dist);
        -- переводим радианы в градусы
        dist = dist * 180 / pi();
        -- переводим градусы в километры
        dist = dist * 60 * 1.8524;

        RETURN dist;
    END IF;
END;
'
LANGUAGE PLPGSQL;